AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Create CloudWatch rule to run Lambda function periodically

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: S3 Media Asset Bucket and StorageGateway File Share
        Parameters:
          - FileGatewayShare
      - Label:
          default: Project tag
        Parameters:
          - Project
    ParameterLabels:
      FileGatewayShare:
        default: 'StorageGateway File share ID:'
      Project:
        default: 'Project Tag for resources and billing:'
        
Parameters:
  FileGatewayShare:
    Description: File Share Id
    Type: String
    Default: share-
  Project:
    Type: String
    Description: Project Tag for resources and billing
    Default: POC

Resources:
  RefreshCacheLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Join
          - ''
          - - |
              const path = require('path');
              const AWS = require('aws-sdk');
               
              const storagegateway = new AWS.StorageGateway({ apiVersion: '2013-06-30' });
               
              exports.handler = async (event, context) => {
                console.log('Cache Refresh Called:', JSON.stringify(event, null, 2));
               
                // Set environment
                const AWS_ACCOUNT_ID = context.invokedFunctionArn.split(':')[4];
                const AWS_REGION = process.env.AWS_REGION;
                const FILE_SHARE = process.env.FILE_SHARE;
               
                // Refresh file cache
                console.log('FileShareARN: arn:aws:storagegateway:'+AWS_REGION+':'+AWS_ACCOUNT_ID+':share/'+FILE_SHARE);
                let sgw_params = {
                  FileShareARN: 'arn:aws:storagegateway:'+AWS_REGION+':'+AWS_ACCOUNT_ID+':share/'+FILE_SHARE,
                  FolderList: [ '/' ],
                  Recursive: true
                };
                var refreshCachePromise = storagegateway.refreshCache(sgw_params).promise();
                await refreshCachePromise.then(function(data) {
                  console.log('Cache Refresh Success');
                }).catch(function(err) {
                  console.log(err);
                });
                
              };
      Environment:
        Variables:
          FILE_SHARE: !Ref FileGatewayShare
      Handler: index.handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: nodejs14.x
      Timeout: 5
      Tags: 
        -
          Key: "Project"
          Value: !Ref Project      
  RefreshCacheLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties: 
      RetentionInDays: 3
      LogGroupName: !Join ['', ['/aws/lambda/', !Ref RefreshCacheLambda ]]
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: FileGatewayCacheRefresh
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 'storagegateway:RefreshCache'
                Resource: !Sub 'arn:aws:storagegateway:${AWS::Region}:${AWS::AccountId}:share/${FileGatewayShare}'
  RefreshCacheSchedule:
    Type: AWS::Events::Rule
    Properties: 
      Description: Schedule to refresh File Gateway cache
      RoleArn: !GetAtt LambdaIAMRole.Arn
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt RefreshCacheLambda.Arn
          Id: !Join
            - '-'
            - - !Ref Project
              - RefreshCacheTarget
  RefreshCacheInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt RefreshCacheLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RefreshCacheSchedule.Arn
